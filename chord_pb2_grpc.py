# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chord_pb2 as chord__pb2


class ChordStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPredecessor = channel.unary_unary(
                '/chord.Chord/GetPredecessor',
                request_serializer=chord__pb2.ER.SerializeToString,
                response_deserializer=chord__pb2.Node.FromString,
                )
        self.GetSuccessor = channel.unary_unary(
                '/chord.Chord/GetSuccessor',
                request_serializer=chord__pb2.ER.SerializeToString,
                response_deserializer=chord__pb2.Node.FromString,
                )
        self.FindSuccessor = channel.unary_unary(
                '/chord.Chord/FindSuccessor',
                request_serializer=chord__pb2.ID.SerializeToString,
                response_deserializer=chord__pb2.Node.FromString,
                )
        self.ClosestPrecedingFinger = channel.unary_unary(
                '/chord.Chord/ClosestPrecedingFinger',
                request_serializer=chord__pb2.ID.SerializeToString,
                response_deserializer=chord__pb2.Node.FromString,
                )


class ChordServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPredecessor(self, request, context):
        """GetPredecessor returns the node believed to be the current predecessor.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSuccessor(self, request, context):
        """GetSuccessor returns the node believed to be the current successor.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindSuccessor(self, request, context):
        """FindSuccessor finds the node the after ID. May initiate RPC calls to
        other nodes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClosestPrecedingFinger(self, request, context):
        """ClosestPrecedingFinger returns closet finger preceding id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChordServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPredecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPredecessor,
                    request_deserializer=chord__pb2.ER.FromString,
                    response_serializer=chord__pb2.Node.SerializeToString,
            ),
            'GetSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSuccessor,
                    request_deserializer=chord__pb2.ER.FromString,
                    response_serializer=chord__pb2.Node.SerializeToString,
            ),
            'FindSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.FindSuccessor,
                    request_deserializer=chord__pb2.ID.FromString,
                    response_serializer=chord__pb2.Node.SerializeToString,
            ),
            'ClosestPrecedingFinger': grpc.unary_unary_rpc_method_handler(
                    servicer.ClosestPrecedingFinger,
                    request_deserializer=chord__pb2.ID.FromString,
                    response_serializer=chord__pb2.Node.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chord.Chord', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Chord(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPredecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.Chord/GetPredecessor',
            chord__pb2.ER.SerializeToString,
            chord__pb2.Node.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.Chord/GetSuccessor',
            chord__pb2.ER.SerializeToString,
            chord__pb2.Node.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.Chord/FindSuccessor',
            chord__pb2.ID.SerializeToString,
            chord__pb2.Node.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClosestPrecedingFinger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chord.Chord/ClosestPrecedingFinger',
            chord__pb2.ID.SerializeToString,
            chord__pb2.Node.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
